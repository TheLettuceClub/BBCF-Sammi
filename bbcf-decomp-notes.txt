known offsets for BATTLE_CObjectManager
9d4 = health (done)
5ad4 = heat
5ae4 = OD gauge
5b04 = barrier
2010c = drive??
20108 = max drive???
1338 = sprite string
2014 = current action string
1ff4 = previous action string
1a0 = "burning heart" (bang thing)
B28 = position X
30 = side (p1/2)


Stuff Pan said 2/1:
an attacks ability to fatal counter can be tested by doing (field & 0x800) != 0, and the field offset is 0x4A0
offset 0x191720 is what you want to hook for CreateObject events
	ebx,ecx is creator?/object in ref

also, im not sure what else you need right now, but if you want a good way to find stuff, you should investigate the scripts to see if theres any instructions you want to hook, then find those in the script memory (usually by jumping to a text result for a specific sprite or whatever) and then breakpointing on the instruction
you can get the scripts with this tool i wrote here, it has parsers for BBCFs archive format
https://github.com/super-continent/arcsys
(not super useful)

look at stuff that writes to health values for onHit funcs

bbcf.exe+0x182655 is a func that runs once per char per frame
also +0x2997a7 (twice per visual frame update)
	once is esi=0, second is esi=1
+16B01B is marginally better at exactly once per frame
+182655 happens every sprite update
	ebx/ecx here is ptr to updating chars BCOM
	no indicator of which is which, but p1 always ends in A80, p2 in 3F8

+0x18C3C0 is generalized hit/block point
	eax is ptr to attacker?
	esi is ptr to defender?
	also works for projectiles, where attacker will be ptr to it's BCOM
	
+0x2126f6 runs immediately after character select is done, solid for round init. doesn't trigger on vs mode rematch
+0x1584EF is basically perfect round start. runs twice per start, twice per transition after intro?

+0x1c83C4 is round end heat reset, runs twice, also on skipped


Things from CFIM that I want:
GetGameStateTitleScreen: C7 87 0C 01 00 00 04 00 00 00 83 C4 1C
	edi+0x108 here is ptr to game mode as int
	edi+0x10C here is ptr to game state as int
	+0x1F9AEE
GetGameStateMenuScreen: C7 80 0C 01 00 00 1B 00 00 E8 ? ? ? ?
	same as TitleScreen
	+0x32DD33
GetGameStateLobby: C7 80 0C 01 00 00 1F 00 00 00 E8
	no interesting registers here, just use as signal
	+0x34B811
GetGameStateVictoryScreen: C7 80 0C 01 00 00 10 00 00 00 E8
	same as Lobby
	+0x228FA9
GetGameStateVersusScreen: C7 80 0C 01 00 00 0E 00 00 00 E8
	same as Lobby
	+0x21BBDE
GetMatchVariables: C7 41 54 ? ? ? ? 8B CE
	ecx+0x30 = ptr to match state
	ecx+0x18 = ptr to match timer
	ecx+0x4 = ptr to match rounds
	+0x15F67F


enum MatchState_
{
	MatchState_NotStarted = 0,
	MatchState_RebelActionRoundSign = 2,
	MatchState_Fight = 3,
	MatchState_FinishSign = 4,
	MatchState_WinLoseSign = 5,
	MatchState_VictoryScreen = 7
};

enum GameState
{
	GameState_ArcsysLogo = 2,
	GameState_IntroVideoPlaying = 3,
	GameState_TitleScreen = 4,
	GameState_CharacterSelectionScreen = 6,
	GameState_ArcadeActSelectScreen = 11,
	GameState_ScoreAttackModeSelectScreen = 11,
	GameState_SpeedStarModeSelectScreen = 11,
	GameState_ArcadeCharInfoScreen = 12,
	GameState_ArcadeStageSelectScreen = 13,
	GameState_VersusScreen = 14,
	GameState_InMatch = 15,
	GameState_VictoryScreen = 16,
	GameState_StoryMenu = 24,
	GameState_GalleryMenu = 25,
	GameState_ItemMenu = 25,
	GameState_ReplayMenu = 26,
	GameState_MainMenu = 27,
	GameState_TutorialMenu = 28,
	GameState_LibraryMenu = 28,
	GameState_Lobby = 31,
	GameState_StoryPlaying = 33,
	GameState_AbyssMenu = 34,
	GameState_DCodeEdit = 39,
};

enum GameMode
{
	GameMode_Arcade = 1,
	GameMode_Story = 4,
	GameMode_Versus = 5,
	GameMode_Training = 6,
	GameMode_Tutorial = 7,
	GameMode_Challenge = 8,
	// GameMode_Gallery = 9,
	// GameMode_ItemShop = 10,
	GameMode_ReplayTheater = 11,
	// GameMode_TitleScreen = 12,
	// GameMode_MainMenuScreen = 13,
	GameMode_Online = 15,
	GameMode_Abyss = 16,
	// GameMode_DCodeEdit = 18,
};